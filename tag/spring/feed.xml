<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/spring/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2019-04-03T14:13:12+08:00</updated>
  <id>http://localhost:4000/tag/spring/feed.xml</id>

  
  
  

  
    <title type="html">张庆华的个人日志 | </title>
  

  
    <subtitle>Learn, Innovate, Share - Business Based Vision.</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">spring中的100个问题-注解是如何工作的(三)?</title>
      <link href="http://localhost:4000/springboot-annotations" rel="alternate" type="text/html" title="spring中的100个问题-注解是如何工作的(三)?" />
      <published>2016-04-19T11:08:11+08:00</published>
      <updated>2016-04-19T11:08:11+08:00</updated>
      <id>http://localhost:4000/springboot-annotations</id>
      <content type="html" xml:base="http://localhost:4000/springboot-annotations">&lt;p&gt;public @interface Foo{ }
本文从Frame Design的角度说明注解是如何被应用的。&lt;/p&gt;

&lt;p&gt;###&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>mikezhang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">public @interface Foo{ } 本文从Frame Design的角度说明注解是如何被应用的。</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Spring中的100个问题-注解是如何工作的(二)</title>
      <link href="http://localhost:4000/springboot-annotations" rel="alternate" type="text/html" title="Spring中的100个问题-注解是如何工作的(二)" />
      <published>2016-04-12T20:30:01+08:00</published>
      <updated>2016-04-12T20:30:01+08:00</updated>
      <id>http://localhost:4000/springboot-annotations</id>
      <content type="html" xml:base="http://localhost:4000/springboot-annotations">&lt;p&gt;注解定义了很多影响编译器行为的方式,也使得bean的行为看起来不那么透明。&lt;/p&gt;

&lt;h3 id=&quot;注解是从编译阶段开始的&quot;&gt;注解是从编译阶段开始的&lt;/h3&gt;

&lt;p&gt;Java编译器(java compiler)工作时要经过几个阶段:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解析(Parse)阶段[词法、语法解析阶段]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扫描 *.java 源文件, 映射源代码为AST-Nodes(抽象树)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;生成符号表(symbol table)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;处理注解(process annotations)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;javac默认会处理针对特定语法单位上的注解,比如 class，function，field&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;处理语法树的的属性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个过程包括名称解析，类型检查和常量打包等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;数据流(dataflow analysis)分析&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;desugar-重写语法书（AST Rewrite), 翻译一些语法糖&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后生成classfile&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从java6开始, 在JSR269中定义了如何在编译阶段自定义可插拔（pluggable)的注解API。&lt;/p&gt;

&lt;p&gt;在javac的默认输出中可以确认到这个信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-g                         生成所有调试信息
  -g:none                    不生成任何调试信息
  -g:{lines,vars,source}     只生成某些调试信息
  -nowarn                    不生成任何警告
  -verbose                   输出有关编译器正在执行的操作的消息
  -deprecation               输出使用已过时的 API 的源位置
  -classpath &amp;lt;路径&amp;gt;            指定查找用户类文件和注释处理程序的位置
  -cp &amp;lt;路径&amp;gt;                   指定查找用户类文件和注释处理程序的位置
  -sourcepath &amp;lt;路径&amp;gt;           指定查找输入源文件的位置
  -bootclasspath &amp;lt;路径&amp;gt;        覆盖引导类文件的位置
  -extdirs &amp;lt;目录&amp;gt;              覆盖所安装扩展的位置
  -endorseddirs &amp;lt;目录&amp;gt;         覆盖签名的标准路径的位置
  -proc:{none,only}          控制是否执行注释处理和/或编译。
  -processor &amp;lt;class1&amp;gt;[,&amp;lt;class2&amp;gt;,&amp;lt;class3&amp;gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程
  -processorpath &amp;lt;路径&amp;gt;        指定查找注释处理程序的位置
  -parameters                生成元数据以用于方法参数的反射
  -d &amp;lt;目录&amp;gt;                    指定放置生成的类文件的位置
  -s &amp;lt;目录&amp;gt;                    指定放置生成的源文件的位置
  -h &amp;lt;目录&amp;gt;                    指定放置生成的本机标头文件的位置
  -implicit:{none,class}     指定是否为隐式引用文件生成类文件
  -encoding &amp;lt;编码&amp;gt;             指定源文件使用的字符编码
  -source &amp;lt;发行版&amp;gt;              提供与指定发行版的源兼容性
  -target &amp;lt;发行版&amp;gt;              生成特定 VM 版本的类文件
  -profile &amp;lt;配置文件&amp;gt;            请确保使用的 API 在指定的配置文件中可用
  -version                   版本信息
  -help                      输出标准选项的提要
  -A关键字[=值]                  传递给注释处理程序的选项
  -X                         输出非标准选项的提要
  -J&amp;lt;标记&amp;gt;                     直接将 &amp;lt;标记&amp;gt; 传递给运行时系统
  -Werror                    出现警告时终止编译
  @&amp;lt;文件名&amp;gt;                     从文件读取选项和文件名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下两个输入参数与注解有关。&lt;/p&gt;

&lt;p&gt;-processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程&lt;/class3&gt;&lt;/class2&gt;&lt;/class1&gt;&lt;/p&gt;

&lt;p&gt;-processorpath &lt;路径&gt;        指定查找注释处理程序的位置&lt;/路径&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何实现一个注解处理器annotation-procssors&quot;&gt;如何实现一个注解处理器（annotation procssors)&lt;/h3&gt;

&lt;p&gt;定义一个继承自AbstractProcessor的子类，同时必须包含两个注解(SupportedAnnotationTypes、SupportedSourceVersion)&lt;/p&gt;

&lt;p&gt;必须覆盖的两个接口:&lt;/p&gt;

&lt;p&gt;public synchronized void init(ProcessingEnvironment processingEnv)&lt;/p&gt;

&lt;p&gt;public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations,
RoundEnvironment roundEnv)&lt;/p&gt;

&lt;p&gt;这两个方法在编译阶段被java compiler 调用(仅调用一次)&lt;/p&gt;

&lt;p&gt;在maven编译阶段(compiler:compile),显式指定processor可以通过&lt;annotationProcessorPaths&gt;、&lt;annotationProcessors&gt; 这两个可选项实现 [compiler:compile](https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html)&lt;/annotationProcessors&gt;&lt;/annotationProcessorPaths&gt;&lt;/p&gt;

&lt;p&gt;编译阶段检查代码格式的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.SOURCE)
@Target(ElementType.METHOD)
public @interface Setter {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

@SupportedAnnotationTypes({&quot;annotation.Setter&quot;})
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class SetterProcessor extends AbstractProcessor {

    private Messager messager;

    @Override
    public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv) {
        // get elements annotated with the @Setter annotation
        Set&amp;lt;? extends Element&amp;gt; annotatedElements = roundEnv.getElementsAnnotatedWith(Setter.class);

        for (Element element : annotatedElements) {
            if (element.getKind() == ElementKind.METHOD) {
                // only handle methods as targets
                checkMethod((ExecutableElement) element);
            }
        }

        // don't claim annotations to allow other processors to process them
        return false;
    }

    private void checkMethod(ExecutableElement method) {
        // check for valid name
        String name = method.getSimpleName().toString();
        if (!name.startsWith(&quot;set&quot;)) {
            printError(method, &quot;setter name must start with \&quot;set\&quot;&quot;);
        } else if (name.length() == 3) {
            printError(method, &quot;the method name must contain more than just \&quot;set\&quot;&quot;);
        } else if (Character.isLowerCase(name.charAt(3))) {
            if (method.getParameters().size() != 1) {
                printError(method, &quot;character following \&quot;set\&quot; must be upper case&quot;);
            }
        }

        // check, if setter is public
        if (!method.getModifiers().contains(Modifier.PUBLIC)) {
            printError(method, &quot;setter must be public&quot;);
        }

        // check, if method is static
        if (method.getModifiers().contains(Modifier.STATIC)) {
            printError(method, &quot;setter must not be static&quot;);
        }
    }

    private void printError(Element element, String message) {
        messager.printMessage(Diagnostic.Kind.ERROR, message, element);
    }

    @Override
    public void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);

        // get messager for printing errors
        messager = processingEnvironment.getMessager();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class AnnotationProcessorTest {
    
    @Setter
    private void noValue(String value) {}

    @Setter
    public void setString(String value) {}
    
    @Setter
    public static void main(String[] args) {}
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行以上代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javac -Xprint  -XprintRounds  -XprintProcessorInfo   -classpath . -processor SetterProcessor  AnnotationProcessorTest.java 

demo git:(master) ✗ javac -Xprint  -XprintRounds  -XprintProcessorInfo   -classpath . -processor SetterProcessor  AnnotationProcessorTest.java
循环 1:
	输入文件: {AnnotationProcessorTest}
	注释: [Setter]
	最后一个循环: false

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;openjdk8对注解的支持&quot;&gt;OpenJDK8对注解的支持&lt;/h3&gt;

&lt;p&gt;jdk8u/langtools/src/share/classes/javax&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── annotation
│   └── processing
│       ├── AbstractProcessor.java
│       ├── Completion.java
│       ├── Completions.java
│       ├── Filer.java
│       ├── FilerException.java
│       ├── Messager.java
│       ├── ProcessingEnvironment.java
│       ├── Processor.java
│       ├── RoundEnvironment.java
│       ├── SupportedAnnotationTypes.java
│       ├── SupportedOptions.java
│       ├── SupportedSourceVersion.java
│       └── package-info.java
├── lang
│   └── model
│       ├── AnnotatedConstruct.java
│       ├── SourceVersion.java
│       ├── UnknownEntityException.java
│       ├── element
│       │   ├── AnnotationMirror.java
│       │   ├── AnnotationValue.java
│       │   ├── AnnotationValueVisitor.java
│       │   ├── Element.java
│       │   ├── ElementKind.java
│       │   ├── ElementVisitor.java
│       │   ├── ExecutableElement.java
│       │   ├── Modifier.java
│       │   ├── Name.java
│       │   ├── NestingKind.java
│       │   ├── PackageElement.java
│       │   ├── Parameterizable.java
│       │   ├── QualifiedNameable.java
│       │   ├── TypeElement.java
│       │   ├── TypeParameterElement.java
│       │   ├── UnknownAnnotationValueException.java
│       │   ├── UnknownElementException.java
│       │   ├── VariableElement.java
│       │   └── package-info.java
│       ├── overview.html
│       ├── package-info.java
│       ├── type
│       │   ├── ArrayType.java
│       │   ├── DeclaredType.java
│       │   ├── ErrorType.java
│       │   ├── ExecutableType.java
│       │   ├── IntersectionType.java
│       │   ├── MirroredTypeException.java
│       │   ├── MirroredTypesException.java
│       │   ├── NoType.java
│       │   ├── NullType.java
│       │   ├── PrimitiveType.java
│       │   ├── ReferenceType.java
│       │   ├── TypeKind.java
│       │   ├── TypeMirror.java
│       │   ├── TypeVariable.java
│       │   ├── TypeVisitor.java
│       │   ├── UnionType.java
│       │   ├── UnknownTypeException.java
│       │   ├── WildcardType.java
│       │   └── package-info.java
│       └── util
│           ├── AbstractAnnotationValueVisitor6.java
│           ├── AbstractAnnotationValueVisitor7.java
│           ├── AbstractAnnotationValueVisitor8.java
│           ├── AbstractElementVisitor6.java
│           ├── AbstractElementVisitor7.java
│           ├── AbstractElementVisitor8.java
│           ├── AbstractTypeVisitor6.java
│           ├── AbstractTypeVisitor7.java
│           ├── AbstractTypeVisitor8.java
│           ├── ElementFilter.java
│           ├── ElementKindVisitor6.java
│           ├── ElementKindVisitor7.java
│           ├── ElementKindVisitor8.java
│           ├── ElementScanner6.java
│           ├── ElementScanner7.java
│           ├── ElementScanner8.java
│           ├── Elements.java
│           ├── SimpleAnnotationValueVisitor6.java
│           ├── SimpleAnnotationValueVisitor7.java
│           ├── SimpleAnnotationValueVisitor8.java
│           ├── SimpleElementVisitor6.java
│           ├── SimpleElementVisitor7.java
│           ├── SimpleElementVisitor8.java
│           ├── SimpleTypeVisitor6.java
│           ├── SimpleTypeVisitor7.java
│           ├── SimpleTypeVisitor8.java
│           ├── TypeKindVisitor6.java
│           ├── TypeKindVisitor7.java
│           ├── TypeKindVisitor8.java
│           ├── Types.java
│           └── package-info.java
└── tools
    ├── Diagnostic.java
    ├── DiagnosticCollector.java
    ├── DiagnosticListener.java
    ├── DocumentationTool.java
    ├── FileObject.java
    ├── ForwardingFileObject.java
    ├── ForwardingJavaFileManager.java
    ├── ForwardingJavaFileObject.java
    ├── JavaCompiler.java
    ├── JavaFileManager.java
    ├── JavaFileObject.java
    ├── OptionChecker.java
    ├── SimpleJavaFileObject.java
    ├── StandardJavaFileManager.java
    ├── StandardLocation.java
    ├── Tool.java
    ├── ToolProvider.java
    ├── overview.html
    └── package-info.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;篇幅原因，下一篇分析spring中的注解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.h5tube.com/bean-life-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>mikezhang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">注解定义了很多影响编译器行为的方式,也使得bean的行为看起来不那么透明。</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">spring中的100个问题-注解是如何工作的(一)</title>
      <link href="http://localhost:4000/springboot-annotations" rel="alternate" type="text/html" title="spring中的100个问题-注解是如何工作的(一)" />
      <published>2016-04-08T12:15:19+08:00</published>
      <updated>2016-04-08T12:15:19+08:00</updated>
      <id>http://localhost:4000/springboot-annotations</id>
      <content type="html" xml:base="http://localhost:4000/springboot-annotations">&lt;p&gt;注解类似class结构体中的&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;，它解决了class垂直继承机制和interface水平切分机制都无法解决的问题，那就是异构聚合问题。&lt;/p&gt;

&lt;h3 id=&quot;注解解决的基本问题&quot;&gt;注解解决的基本问题&lt;/h3&gt;

&lt;p&gt;因为java的设计，可执行文件在执行前都要加载大量的class文件。这些classfile被加载到内存区以后，如何对各种不同类型的数据进行检索？&lt;/p&gt;

&lt;p&gt;在框架设计时经常有这样的需求，因为它需要的是最基本的信息。&lt;/p&gt;

&lt;p&gt;比如，当前场景下，需要一个桌子(desk)和一只狗(dog)的对象，使用继承和接口都无法优雅的解决这个问题。因为这两个是严重不相关的信息。&lt;/p&gt;

&lt;h4 id=&quot;注解是什么&quot;&gt;注解是什么？&lt;/h4&gt;

&lt;p&gt;在wikipedia中的&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_annotations&quot;&gt;定义&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;In the Java computer programming language, an annotation is a form of syntactic metadata that can be added to Java source code.[1] Classes, methods, variables, parameters and packages may be annotated. Like Javadoc tags, Java annotations can be read from source files. Unlike Javadoc tags, Java annotations can also be embedded in and read from class files generated by the compiler. This allows annotations to be retained by Java VM at run-time and read via reflection.[2] It is possible to create meta-annotations out of the existing ones in Java.[3]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述可以理解为:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注解是一种可以加入到源代码的语法元信息，包括class、方法、字段和包。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，什么又是元信息?&lt;a href=&quot;https://en.wikipedia.org/wiki/Metadata&quot;&gt;https://en.wikipedia.org/wiki/Metadata&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Metadata is &quot;data [information] that provides information about other data&quot;.[1] Many distinct types of metadata exist, among these descriptive metadata, structural metadata, administrative metadata[2], reference metadata and statistical metadata[3]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简言之，元数据就是定义系统的基本数据。&lt;/p&gt;

&lt;p&gt;在java中所有数据都被以class文件的形式定义，除了引用和命名空间之外不存在class之外定义的数据。&lt;/p&gt;

&lt;p&gt;在C++描述java语法的层面，它把class文件打散后，以独立C++对象(oop)的形式描述java class的每一个组成部分，比如 class、Method、Instance、Parameter、annotation。&lt;/p&gt;

&lt;p&gt;所以，注解在(c++)运行时层面就是存在的基本数据。&lt;/p&gt;

&lt;h4 id=&quot;jdk中预置的注解&quot;&gt;JDK中预置的注解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html&quot;&gt;https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;注解是在何时when何地where如何how起作用的&quot;&gt;注解是在何时(when)、何地(where)、如何(how)起作用的？&lt;/h4&gt;

&lt;p&gt;注解在java体系中的结构层次图，简要描述如下
&lt;a href=&quot;http://blog.h5tube.com/annotation-02.png&quot;&gt;Java annotations&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;当注解应用在字段时&quot;&gt;当注解应用在字段时&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Foo {
    @FieldAnnotation(&quot;here&quot;) public Object object;

    @FieldAnnotation(&quot;there&quot;) public Object other;

    @MethodAnnotation public Object setObject(@ParameterAnnotation final Object object){
      this.object = object;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(一)如何根据标注内容设置字段的值？&lt;/p&gt;

&lt;p&gt;其中一种方式，使用class的静态方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void setPropertyByAnnotationName(final Object object, final String name, final Object value) {
    final Field[] fields = object.getClass().getDeclaredFields();
    for (final Field field : fields) {
        final FieldAnnotation fieldAnnotation = field.getAnnotation(FieldAnnotation.class);
        if(fieldAnnotation!=null &amp;amp;&amp;amp; name.equals(fieldAnnotation.value()){
            field.set(object, value);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Foo foo = new Foo();
// 查找标注here的字段，设置为“this is set”
setPropertyByAnnotationName(foo, &quot;here&quot;, &quot;this is set!&quot;);
setPropertyByAnnotationName(foo, &quot;there&quot;, Calendar.getInstance());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(二) 如何根据标注内容调起class内部方法?&lt;/p&gt;

&lt;p&gt;使用类似的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void callMethodByAnnotation(final Object object, final Object value) {
    final Method[] methods = object.getClass().getDeclaredMethods();
    for (final Method method : methods) {
        final MethodAnnotation methodAnnotation = method.getAnnotation(MethodAnnotation.class);
        if(fieldAnnotation!=null){
            // 这里调用method.invoke方法
            method.invoke(object, value);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用方式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Foo foo = new Foo();
callMethodByAnnotation(foo, &quot;&quot;this is set!&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(三) 如何设置方法参数的默认值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 声明一个注解
@Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME)
public @interface ParameterAnnotation { String value(); }

class Foo {
    @MethodAnnotation public Object setObject(@ParameterAnnotation(&quot;inside&quot;) final Object object){
        this.object = object;
    }
}

public void callMethodByAnnotation(final Object object, final Map map) {
    // 取到对应的注解方法
    final Method[] methods = object.getClass().getDeclaredMethods();
    for (final Method method : methods) {
        final MethodAnnotation methodAnnotation = method.getAnnotation(MethodAnnotation.class);
        if (methodAnnotation != null) {
            // 获取注解参数的注释
            final Annotation[][] parameterAnnotations = method.getParameterAnnotations();
            final Object[] parameters = new Object[parameterAnnotations.length];
            for (int i = 0; i &amp;lt; parameterAnnotations.length; i++) {
                parameters[i] = null;

                final Annotation[] annotations = parameterAnnotations[i];
                for (final Annotation annotation : annotations) {
                    if (annotation instanceof ParameterAnnotation) {
                        // 取到注解中对应的参数值
                        parameters[i] = map.get(((ParameterAnnotation) annotation).value());
                    }
                }
            }
            method.invoke(object, parameters);
        }
    }
}

// 最后，方法调用方式如下
Map map = new Map();
map.put(&quot;inside&quot;, &quot;this is set!&quot;);
Foo foo = new Foo();
callMethodByAnnotation(foo,map);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>mikezhang</name>
        
        
      </author>

      

      
        <category term="spring" />
      

      
        <summary type="html">注解类似class结构体中的tag，它解决了class垂直继承机制和interface水平切分机制都无法解决的问题，那就是异构聚合问题。</summary>
      

      
      
    </entry>
  
</feed>
