<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/c++/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2019-03-26T15:12:54+08:00</updated>
  <id>http://localhost:4000/tag/c++/feed.xml</id>

  
  
  

  
    <title type="html">张庆华的个人日志 | </title>
  

  
    <subtitle>Learn, Innovate, Share - Business Based Vision.</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">C++中的常用语法</title>
      <link href="http://localhost:4000/cpp-syntax" rel="alternate" type="text/html" title="C++中的常用语法" />
      <published>2014-09-10T14:10:19+08:00</published>
      <updated>2014-09-10T14:10:19+08:00</updated>
      <id>http://localhost:4000/cpp-syntax</id>
      <content type="html" xml:base="http://localhost:4000/cpp-syntax">&lt;p&gt;Language is just like a puppet.&lt;/p&gt;

&lt;h3 id=&quot;volatile&quot;&gt;Volatile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Volatile_(computer_programming)&quot;&gt;Volatile在wiki中的定义&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;struct&quot;&gt;Struct&lt;/h3&gt;

&lt;h3 id=&quot;类型定义&quot;&gt;类型定义&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Foo{ ... };
typedef Foo * FooPtr;
typedef const Foo * ConstFooPtr;
typedef std::vector&amp;lt;Foo&amp;gt; FooVec; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;算法复杂度-logn&quot;&gt;算法复杂度 log(n)&lt;/h4&gt;

&lt;p&gt;算法的时间复杂度很多都用包含O(logN)这样的描述，但是却没有明确说logN的底数究竟是多少。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;算法中log级别的时间复杂度都是由于使用了分治思想,这个底数直接由分治的复杂度决定。
如果采用二分法,那么就会以2为底数,三分法就会以3为底数,其他亦然。
不过无论底数是什么,log级别的渐进意义是一样的。
也就是说该算法的时间复杂度的增长与处理数据多少的增长的关系是一样的。

我们先考虑O(logx(n))和O(logy(n))，x!=y，我们是在考虑n趋于无穷的情况。
求当n趋于无穷大时logx(n)/logy(n)的极限可以发现，极限等于lny/lnx，也就是一个常数，
也就是说，在n趋于无穷大的时候，这两个东西仅差一个常数。
所以从研究算法的角度log的底数不重要。

最后，结合上面，我也说一下关于大O的定义（算法导论28页的定义），
注意把这个定义和高等数学中的极限部分做比较，
显然可以发现，这里的定义正是体现了一个极限的思想，
假设我们将n0取一个非常大的数字，
显然，当n大于n0的时候，我们可以发现任意底数的一个对数函数其实都相差一个常数倍而已。
所以书上说写的O（logn）已经可以表达所有底数的对数了，就像O(n^2)一样。
没有非常严格的证明，不过我觉得这样说比较好理解，如果有兴趣证明，完全可以参照高数上对极限趋于无穷的证明。

[原文](https://blog.csdn.net/jdbc/article/details/42173751)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="C++" />
      

      
        <summary type="html">Language is just like a puppet.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">C++中的常用语法</title>
      <link href="http://localhost:4000/cpp-syntax-2" rel="alternate" type="text/html" title="C++中的常用语法" />
      <published>2014-09-10T14:10:19+08:00</published>
      <updated>2014-09-10T14:10:19+08:00</updated>
      <id>http://localhost:4000/cpp-syntax%202</id>
      <content type="html" xml:base="http://localhost:4000/cpp-syntax-2">&lt;p&gt;Language is just like a puppet.&lt;/p&gt;

&lt;h3 id=&quot;volatile&quot;&gt;Volatile&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Volatile_(computer_programming)&quot;&gt;Volatile在wiki中的定义&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;struct&quot;&gt;Struct&lt;/h3&gt;

&lt;h3 id=&quot;类型定义&quot;&gt;类型定义&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Foo{ ... };
typedef Foo * FooPtr;
typedef const Foo * ConstFooPtr;
typedef std::vector&amp;lt;Foo&amp;gt; FooVec; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;算法复杂度-logn&quot;&gt;算法复杂度 log(n)&lt;/h4&gt;

&lt;p&gt;算法的时间复杂度很多都用包含O(logN)这样的描述，但是却没有明确说logN的底数究竟是多少。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;算法中log级别的时间复杂度都是由于使用了分治思想,这个底数直接由分治的复杂度决定。
如果采用二分法,那么就会以2为底数,三分法就会以3为底数,其他亦然。
不过无论底数是什么,log级别的渐进意义是一样的。
也就是说该算法的时间复杂度的增长与处理数据多少的增长的关系是一样的。

我们先考虑O(logx(n))和O(logy(n))，x!=y，我们是在考虑n趋于无穷的情况。
求当n趋于无穷大时logx(n)/logy(n)的极限可以发现，极限等于lny/lnx，也就是一个常数，
也就是说，在n趋于无穷大的时候，这两个东西仅差一个常数。
所以从研究算法的角度log的底数不重要。

最后，结合上面，我也说一下关于大O的定义（算法导论28页的定义），
注意把这个定义和高等数学中的极限部分做比较，
显然可以发现，这里的定义正是体现了一个极限的思想，
假设我们将n0取一个非常大的数字，
显然，当n大于n0的时候，我们可以发现任意底数的一个对数函数其实都相差一个常数倍而已。
所以书上说写的O（logn）已经可以表达所有底数的对数了，就像O(n^2)一样。
没有非常严格的证明，不过我觉得这样说比较好理解，如果有兴趣证明，完全可以参照高数上对极限趋于无穷的证明。

[原文](https://blog.csdn.net/jdbc/article/details/42173751)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name></name>
        
        
      </author>

      

      
        <category term="C++" />
      

      
        <summary type="html">Language is just like a puppet.</summary>
      

      
      
    </entry>
  
</feed>
