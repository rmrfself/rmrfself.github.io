<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/kubernetes/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2019-03-27T10:49:08+08:00</updated>
  <id>http://localhost:4000/tag/kubernetes/feed.xml</id>

  
  
  

  
    <title type="html">张庆华的个人日志 | </title>
  

  
    <subtitle>Learn, Innovate, Share - Business Based Vision.</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">[GCE]安装Kubernetes Dashboard</title>
      <link href="http://localhost:4000/k8s-dashboard-install" rel="alternate" type="text/html" title="[GCE]安装Kubernetes Dashboard" />
      <published>2018-10-10T19:20:11+08:00</published>
      <updated>2018-10-10T19:20:11+08:00</updated>
      <id>http://localhost:4000/k8s-dashboard-install</id>
      <content type="html" xml:base="http://localhost:4000/k8s-dashboard-install">&lt;p&gt;Kubeternetes Dashboatd 安装手记&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;部署之前,确认一下yaml文件是来自master分支。&lt;/p&gt;

&lt;p&gt;下面这个链接是来自dashboard在github上的最新代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://sourcegraph.com/github.com/kubernetes/dashboard@master/-/blob/src/deploy/recommended/kubernetes-dashboard.yaml?diff=cfc62d86f67b70771dfc0798f10a891aa329b9c4&amp;amp;utm_source=chrome-extension#L11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://sourcegraph.com/github.com/kubernetes/dashboard@master/-/blob/src/deploy/recommended/kubernetes-dashboard.yaml?diff=cfc62d86f67b70771dfc0798f10a891aa329b9c4&amp;amp;utm_source=chrome-extension#L11&quot;&gt;点击查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文件内容分为一下几个部分&lt;/p&gt;

&lt;h3 id=&quot;dashboard-secret--serviceaccount-定义&quot;&gt;Dashboard Secret &amp;amp;&amp;amp; ServiceAccount 定义&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-certs
  namespace: kube-system
type: Opaque
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Secret 在负责的网络环境中是很重要的角色,它是k8s世界里资源流通的凭证。&lt;/p&gt;

&lt;p&gt;Secret类型的k8s资源把敏感数据比如秘钥,密码,token中从配置文件中拿了出来。&lt;/p&gt;

&lt;p&gt;如果没有secret这个类型的抽象类型, 在k8s的yaml配置文件中将到处都是关于password,token,secret 这样的字样,而且密码修改后非常不容易维护。 这就是secret这类资源的价值吧。&lt;/p&gt;

&lt;p&gt;Secret是一个Map数据类型,附加了一些行为,比如可以以volume mount的方式导入到Pods定义文件中去。&lt;/p&gt;

&lt;p&gt;Secret 存储后的类型有3种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Opaque 类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文意思是&lt;不透明的&gt;,以base64格式存储。&lt;/不透明的&gt;&lt;/p&gt;

&lt;p&gt;base64是一种可逆的加密方式。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -n 'zhangqinghua' | base64

输出 emhhbmdxaW5naHVh, 反解码很容易:

echo -n 'emhhbmdxaW5naHVh' | base64 --decode 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;kubernetes.io/dockerconfigjson 类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;K8s的核心职责之一是容器编排,最常见的场景是拉取镜像并生成对应的pods资源。&lt;/p&gt;

&lt;p&gt;在这过程中需要与私有仓库进行验权,这时候用到了这个类型的secret。&lt;/p&gt;

&lt;p&gt;Secret的用法如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: test-scret-use-methods
spec:
  containers:
  - name: test-container
    image: 192.168.1.12:5000/xxxx/test-image:latest
    imagePullPolicy: Always
  imagePullSecrets:
  - name: new-created-secret-for-demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中new-created-secret-for-demo是新创建的secret。&lt;/p&gt;

&lt;p&gt;在k8s的官方文档里有创建实例,&lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubernetes.io/service-account-token 类型&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k8snode-03@A11131221040327:~/$ kubectl get serviceaccount --all-namespaces
NAMESPACE     NAME                                 SECRETS   AGE
default       default                              1         18h
kube-public   default                              1         18h
kube-system   attachdetach-controller              1         18h
kube-system   bootstrap-signer                     1         18h

k8snode-03@A11131221040327:~/$ kubectl describe serviceaccount/default -n kube-system

Name:                default
Namespace:           kube-system
Labels:              &amp;lt;none&amp;gt;
Annotations:         &amp;lt;none&amp;gt;
Image pull secrets:  &amp;lt;none&amp;gt;
Mountable secrets:   default-token-jmgnw
Tokens:              default-token-jmgnw
Events:              &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Serviceaccount作为独立资源,关联了namespace、以及和它有关的token、secrets。&lt;/p&gt;

&lt;p&gt;用途是在为pods内部的应用程序提供访问Service Api的凭证,例如,获取某一namespace下的pods列表。&lt;/p&gt;

&lt;h3 id=&quot;角色和权限分配&quot;&gt;角色和权限分配&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
rules:
  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.
- apiGroups: [&quot;&quot;]
  resources: [&quot;secrets&quot;]
  verbs: [&quot;create&quot;]
  # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.

---------  

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard-minimal
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段配置把kubernetes-dashboard绑定到Role定义的权限设置里,规定它有权限操作的资源。&lt;/p&gt;

&lt;h1 id=&quot;部署&quot;&gt;部署&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard
        image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0
        ports:
        - containerPort: 8443
          protocol: TCP
        args:
          - --auto-generate-certificates
          # Uncomment the following line to manually specify Kubernetes API server Host
          # If not specified, Dashboard will attempt to auto discover the API server and connect
          # to it. Uncomment only if the default does not work.
          # - --apiserver-host=http://my-address:port
        volumeMounts:
        - name: kubernetes-dashboard-certs
          mountPath: /certs
          # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: kubernetes-dashboard-certs
        secret:
          secretName: kubernetes-dashboard-certs
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deployment 整合了上面定义的所有资源,包括Secret、AccountService。&lt;/p&gt;

&lt;p&gt;这部分是最容易出错的地方。有个issue整理了无法启动的原因&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/dashboard/issues/1578&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating API server client for https://10.96.0.1:443
Error while initializing connection to Kubernetes apiserver. This most likely means that the cluster is misconfigured (e.g., it has invalid apiserver certificates or service accounts configuration) or the --apiserver-host param points to a server that does not exist. Reason: Get https://10.96.0.1:443/version: dial tcp 10.96.0.1:443: i/o timeout
Refer to the troubleshooting guide for more information: https://github.com/kubernetes/dashboard/blob/master/docs/user-guide/troubleshooting.md

10.96.0.1 是Service Api 的cluster IP

k8snode-03@A11131221040327:~/.kube$ kubectl get service
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   19h

k8snode-03@A11131221040327:~/.kube$ kubectl describe service kubernetes
Name:              kubernetes
Namespace:         default
Labels:            component=apiserver
                   provider=kubernetes
Annotations:       &amp;lt;none&amp;gt;
Selector:          &amp;lt;none&amp;gt;
Type:              ClusterIP
IP:                10.96.0.1
Port:              https  443/TCP
TargetPort:        6443/TCP
Endpoints:         192.168.12.39:6443
Session Affinity:  None
Events:            &amp;lt;none&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后,获取某一account的token&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用proxy访问dashboard&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl proxy

输出
Starting to serve on 127.0.0.1:8001 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>mikezhang</name>
        
        
      </author>

      

      
        <category term="kubernetes" />
      

      
        <summary type="html">Kubeternetes Dashboatd 安装手记</summary>
      

      
      
    </entry>
  
</feed>
